1. 使用异常机制处理程序错误

为下面的代码加入适当的异常处理, 使得该程序可以处理输入的字符串不为整数字符串的情况（要求重新输入）。

public static void main(String[] args) {

int[] x = new int[3];

Scanner inputScan = new Scanner(System.in);

for(int i = 0; i < x.length;i++){

System.out.println("Please input the "+(i+1)+" integer:");

String inputInt = inputScan.nextLine();

x[i] = Integer.parseInt(inputInt);

}

System.out.println(Arrays.toString(x));
}

2. List与Iterator接口

(1)编写NameDao接口，包含如下方法：

//将数组中的字符串放入列表，该方法需要使用ListIterator接口实现添加

public List getNameFromArray(String[] names);

//在列表中搜索到与name相同的项目，就返回该name所在的序号，找不到返回-1。

public int searchName(List nameList, String name);

//根据指定id，从列表中移除指定的项目，如果id指定错误(负数或者超出列表最大值)抛出IllegalArgumentException异常，移除成功返回true

public boolean removeFromList(List nameList, int id);

(2)编写NameDaoImpl实现NameDao接口。

(3)编写一个测试类，测试上述代码的功能。

3. Map与HashMap

(1)编写Student类，只有String name与int age两个属性和他们的setter/getter方法，覆盖其hashCode与equals方法。

(2)编写方法List getRandomStudents(int n)随机生成n个学生的列表。

说明：调用“基础代码”中的Util.getRandomName (int min, int max)获取随机名字，调用public static int getRandomAge(int min, int max)生成随机年龄。

(3)在Util类中编写方法：public static Map makeStudentMap(List);，将List中每个Student的name作为key, Student对象本身作为value放入Map中，并返回。

(4)在Util类中编写方法：public static Student searchStudent(Map stuMap, String name);，根据指定的name返回对应的学生，如果没有找到返回null。

(5)在Util类中编写方法：public static List generateNameList(int n);，生成n个字符串的NameList并返回。

(6)在Util类中编写方法：Map generateStudentMap(int n);，生成包含n个键的的StudentMap并返回。

说明：调用getRandomStudents方法；调用makeStudentMap方法；返回StudentMap。

(7)对比测试。在初始化阶段调用generateNameList方法生成nameList列表，里边包含1000万个字符串。在初始化阶段调用getRandomStudents生成1000万个Student对象，然后调用makeStudentMap方法生成stuMap映射表。

对nameList调用searchName方法搜索指定字符串并统计执行时间。

对stuMap调用searchStudent方法搜索指定字符串对应的学生对象并统计执行时间。

思考：步骤(7)中，哪个方法搜索速度快？为什么？

(8)遍历输出StudentMap前10个的key，前10个value，前10个entry。

备注：可以设置虚拟机选项，让JVM能够拥有大内存。Eclipse中的设置方法：打开Window->Preferences菜单，左边列选择Java->Installed JREs，在需要设置的JRE上，点击Edit，设置Default VM arguments的值为“-Xms1024m -Xmx4096m”，其中-Xms设置最小内存，-Xmx设置最大内存。

4. Collections

(1)改写Student类，增加int grade属性。

(2)随机生成100个Student对象放入students数组。

(3)将students数组转换成studentList(List类型)。

(4)使用Collections.sort对student的成绩进行排序。

(5)使用Collections的min和max方法找到成绩最高的和成绩最低学生。

(6)使用Collections的binarySearch查找成绩等于60的学生。

(7)编写方法从studentList找出grade小于60的学生，放入otherList。

(8)使用List的removeAll方法，从studentList中移除otherList。

(9)使用Collections的shuffle方法，打乱studentList中学生排列的顺序。

(10)将studentList转换为数组。